// exportFunctions.js
import Papa from "papaparse";
import { saveAs } from "file-saver";
import jsPDF from "jspdf";
import "jspdf-autotable";
import MainLogo from "../../images/MainLogo.png";

export const exportToCSV = (
  headers,
  rows,
  filename = "report.csv",
  user = "Unknown",
  title = "Report",
  startDate = null,
  endDate = null
) => {
  const timestamp = new Date().toLocaleString();

  // Format date range if provided
  let dateRange = "";
  if (startDate || endDate) {
    const formatDate = (date) => {
      if (!date) return "";
      const d = new Date(date);
      return d.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
    };

    // If both dates are the same, display as "Today's date"
    if (startDate && endDate && startDate === endDate) {
      dateRange = `Today's date: ${formatDate(startDate)}`;
    } else if (startDate && endDate) {
      dateRange = `Date Range: ${formatDate(startDate)} to ${formatDate(endDate)}`;
    } else if (startDate && !endDate) {
      dateRange = `Date: ${formatDate(startDate)}`;
    } else if (!startDate && endDate) {
      dateRange = `Date: Up to ${formatDate(endDate)}`;
    }
  }

  const data = [
    ["TicketEase"],
    [title],
    ...(dateRange ? [[dateRange]] : []),
    [],
    headers,
    ...rows,
    [],
    [`Exported By: ${user}`],
    [`Timestamp: ${timestamp}`],
    [],
    ["Generated by TicketEase"],
  ];

  const csv = Papa.unparse(data);
  const blob = new Blob(["\uFEFF" + csv], { type: "text/csv;charset=utf-8;" });
  if (!filename.endsWith(".csv")) filename += ".csv";
  saveAs(blob, filename);
};

export const exportToPDF = (
  headers,
  rows,
  title = "Report",
  filename = "report.pdf",
  user = "Unknown",
  startDate = null,
  endDate = null
) => {
  const timestamp = new Date().toLocaleString();
  const doc = new jsPDF("landscape");
  const pageWidth = doc.internal.pageSize.getWidth();

  const logoWidth = 40;
  const logoHeight = 40;
  const logoX = (pageWidth - logoWidth) / 2;
  doc.addImage(MainLogo, "PNG", logoX, 10, logoWidth, logoHeight);

  doc.setFontSize(16);
  doc.text(title, pageWidth / 2, 60, { align: "center" });

  // Add date range if provided
  let startY = 70;
  if (startDate || endDate) {
    const formatDate = (date) => {
      if (!date) return "";
      const d = new Date(date);
      return d.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
    };

    let dateRange = "";
    // If both dates are the same, display as "Today's date"
    if (startDate && endDate && startDate === endDate) {
      dateRange = `Today's date: ${formatDate(startDate)}`;
    } else if (startDate && endDate) {
      dateRange = `Date Range: ${formatDate(startDate)} to ${formatDate(endDate)}`;
    } else if (startDate && !endDate) {
      dateRange = `Date: ${formatDate(startDate)}`;
    } else if (!startDate && endDate) {
      dateRange = `Date: Up to ${formatDate(endDate)}`;
    }

    doc.setFontSize(12);
    doc.text(dateRange, pageWidth / 2, 68, { align: "center" });
    startY = 76;
  }

  doc.autoTable({
    head: [headers],
    body: rows,
    startY: startY,
    theme: "grid",
    headStyles: { fillColor: [54, 76, 110], textColor: [255, 255, 255] },
    bodyStyles: { fontSize: 10 },
    didDrawPage: (data) => {
      const pageHeight = doc.internal.pageSize.getHeight();

      doc.setFontSize(10);
      doc.text(`Exported By: ${user}`, pageWidth - 20, pageHeight - 20, {
        align: "right",
      });
      doc.text(`Timestamp: ${timestamp}`, pageWidth - 20, pageHeight - 14, {
        align: "right",
      });

      doc.text("Generated by TicketEase", pageWidth / 2, pageHeight - 8, {
        align: "center",
      });
    },
  });

  if (!filename.endsWith(".pdf")) filename += ".pdf";
  doc.save(filename);
};